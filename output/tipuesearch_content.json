{"pages":[{"title":"Killifish PromethION data sharing","text":"We have some new long-read ONT PromethION genomic DNA sequencing data from killifish! While we're working with the data, generating Illumina PE150 data for each, and preparing a manuscript for publication, we wanted to share this information and data in case it is useful for anyone. Since there are not many PromethION instruments available, these are probably some of the first data available, at least from killifish. This is a collaborative effort between my two advisors, Dr. Titus Brown and Dr. Andrew Whitehead. (Seriously, a grad student could not be luckier than me to have two great, supportive advisors and collaborative support from labs and colleagues. I can't believe how lucky I am.) Other contributors are Dr. Ruta and Tony Gill. Special thanks to PoreCamp, Texas A&M Agrilife Sequencing. And Dr. David Duvernell for sending us fish. And thank you to support provided by the Moore Foundation Data-Driven-Discovery investigator award to Dr. Titus Brown. New PromethION instrument at the UC Davis Genome Center In May 2018 , the UC Davis Genome Center received its PromethION from Oxford Nanopore. This was part of a collaborative effort to acquire this instrument through the early release program, back in 2016 by Genome Center faculty: Dr. Richard Michelmore, Dr. Megan Dennis (who is on my dissertation committee!), and Dr. Titus Brown. I have been working with the ONT MinION to see if it is feasible to use for genome assemblies of eukaryotic organisms. https://twitter.com/monsterbashseq/status/963592729241382912 MinION Costs: https://twitter.com/monsterbashseq/status/963154668942589952 I went to Porecamp: https://twitter.com/monsterbashseq/status/959153636445073408 Turns out that it is not. But the PromethION has been great for our purposes. PromethION promises higher yield than MinION, allowing it to be more feasible for Fundulus killifish These species of killifish have never been sequenced before. Live samples were gratiously shipped to UC Davis by Dr. David Duvernell at Missouri University of Science & Technology https://twitter.com/monsterbashseq/status/1048308106596245504 Very important fish for comparative genomics: Whitehead et al. 2010. Phylogeny of killifish osmotic tolerance Whitehead et al. 2011. Genomic mechanisms of evolved physiological plasticity in killifish distributed along an environmental salinity gradient Brennan et al. 2015. Reciprocal osmotic challenges reveal mechanisms of divergence in phenotypic plasticity in the killifish Fundulus heteroclitus Recently, Fundulidae tree of life DNA extractions long-reads protocol by Joshua Quick and Nick Loman: https://twitter.com/Scalene/status/955091398285582337 Agilent protocol, found by Tony Fresh is better than frozen Tried other protocols Ruta found that adding urea to lysis buffer helped DNA was difficult to get into solution. With the MinION, our sample was not utilizing the pores as efficiently as it could be. ONT has mentioned that this is a fish-specific sample issue. Has anyone else found this to be the case with fish hmw DNA? Brittle and breaking easily. Show gels. https://twitter.com/monsterbashseq/status/852655158160904192 https://twitter.com/nanopore/status/872910510508953605 Sequencing Species | native physiology | clade | ONT data | Illumina | best N50 | | --- | --- | --- | --- | --- | --- | --- | --- | Fundulus catenatus | Freshwater | 1 | TBD | TBD | TBD | Adinia xenica | Marine | 3 | 38 Gb | TBD | 369,038; n = 794 | Fundulus olivaceus | Freshwater | 3 | 4.9 Gb | 180 Gb | 42,823; n=7,616 (Masurca) | Fundulus nottii | Freshwater | 3 | 33 Gb | TBD | 2 Mb; n = 151 | Other species of freshwater and brackish water killifish ( Lucania parva and Lucania goodei ) from Clade 2 are being sequenced by Dr. Becky Fuller's lab at U. Illinois Urbana-Champaign . Fundulus catenatus (freshwater native, Clade 1) read stats: (ONT) johnsolk@barbera:/share/pilot-johnsolk/ONT_killifish/F_catenatus$ assembly-stats F_cat.fq stats for F_cat.fq sum = 40274806587, n = 23701206, ave = 1699.27, largest = 590485 N50 = 3439, n = 2687295 N60 = 2464, n = 4076415 N70 = 1739, n = 6027668 N80 = 1178, n = 8844065 N90 = 718, n = 13205064 N100 = 5, n = 23701206 N_count = 0 Gaps = 0 Fundulus nottii (freshwater antive, Clade 3) read stats: (ONT) [ljcohen@dev-intel14 F_nottii_PromethION]$ assembly-stats Fnottii_combined.fastq stats for Fnottii_combined.fastq sum = 33440866723, n = 5160367, ave = 6480.33, largest = 667947 N50 = 12995, n = 700534 N60 = 9878, n = 996409 N70 = 7391, n = 1388376 N80 = 5305, n = 1921978 N90 = 3399, n = 2702711 N100 = 5, n = 5160367 N_count = 0 Gaps = 0 Adinia xenica (marine native, Clade 3) read stats: (ONT) [ljcohen@dev-intel14 A_xenica_PromethION]$ assembly-stats A_xenica_combined.fastq stats for A_xenica_combined.fastq sum = 38467326719, n = 15704522, ave = 2449.44, largest = 953774 N50 = 5733, n = 1373426 N60 = 3884, n = 2193610 N70 = 2601, n = 3408866 N80 = 1661, n = 5265095 N90 = 952, n = 8322903 N100 = 5, n = 15704522 N_count = 0 Gaps = 0 Preliminary data products Rough assemblies and QC: https://osf.io/zjv86/ Our plan from here: 1. Post data European Nucleotide Archive (ENA)-EBI SRA-NCBI - is ridiculous 2. Data note Either: - F1000 research - GigaScience 3. Do the science! Comparative genomics. Scan for regulatory regions of interest, e.g. salinity-responsive enhancing elements (OSRE) Questions What to do with millions of fast5 files? Our fastq are 70-100 GB, but the directory of raw fast5 signal files are >600 GB. Nanopolish uses the raw fast5 signal files to correct. How can these be shared efficiently? Data are unfiltered, should we remove DNA CS lambda phage spike-in? Where is the best place to share these data? Even though zenodo has recently upgraded their file size limits to 50 GB , it is not a good place: Dear Lisa, We're terribly sorry for the delay in response. Upload quota increase requests for bigger datasets have to be passed up the hierarchy, which usually takes time. I'm sorry to inform you that we, unfortunately, will not be able to host the dataset as it surpasses our max allowed quota increase too much. By default, we provide a one-time quota increase up to 100GB for a dataset that will be cited from a peer-reviewed article. Zenodo is a free-to-use service, an in order to keep it this way, we have to restrict the incoming data volume rate as very large datasets contribute significantly to the overall data volume in Zenodo. Unfortunately, at this point, we also cannot receive payment for quota increases, though we do hope that this will be possible in the future, at which point we will announce this possibility. Is sharing the data useful for anyone? Any advice, questions, or comments?","tags":"Python","url":"https://ljcohen.github.io/blog/killifish-promethion-data-sharing.html"},{"title":"Blogging with Pelican","text":"Luiz Irber was gratious in spending time to walk us through how to set up a blog with Pelican, host it on github.io , and have travis-ci test and deploy. Video: Some Background I've had a blog that I started when I was first learning and developing computational skills. Wordpress blogs are great for quickly publishing a post, with capacity for formatting pictures and links to Tweets. At the encouragement of Titus a few years ago during our summer DIBSI workshop , I started taking notes on the online collaborative document site, hackmd.io . This cool site lets you write in markdown and immediately see it rendered. The link can be shared with collaborators, and the document can be exported to .pdf , .html , or .md formats. I started writing all of my notes with markdown. But then wanting to write a blog post with my notes? Manually converting .md documents and code chunks into the online wordpress user interface is tedious. This week, I casually mentioned that I wanted to migrate from wordpress to a more markdown-friendly format for my blog. Luiz immediately chimed in that Pelican is great! And uses it for his blog . It turns out that Titus' blog and other lab mate, Charles Reid both have their blogs in Pelican as well. One of the many advantages of Pelican is that it is written in Python, unlike Jekyll which is written in Ruby. (I'm more comfortable coding and debugging in Python than in Ruby.) And Charles provided lots of documentation on how to use Pelican! It's great to be in a lab group where people have such useful and encouraging advice. Tutorial We started with the tutorial from Charles Reid , which has practice content . Make a working directory for your blog: mkdir blog cd blog/ git init Get the configuration file, pelicanconf.py : wget https://raw.githubusercontent.com/charlesreid1/magic-flying-pelican/master/pelican/pelicanconf.py mkdir content cd content/ Navigate to some of the example posts and download: wget https://raw.githubusercontent.com/charlesreid1/magic-flying-pelican/master/pelican/content/posts/hello-world-1.md Taking a look, we see that each .md post file must have this header: Title : Hello world number one Date : 2018 - 05 - 13 22 : 00 Category : Python Tags : pelican Author : charlesreid1 Summary : First hello world post Now we have to install Pelican and markdown. Luiz uses pipenv . This will activate a new virtualenv with pelican and markdown available without messing with dependencies in your computer's $PATH. pip install --user pipenv export PATH=~/.local/bin:$PATH pipenv install pelican markdown pipenv shell Now we need some Pelican themes . (All themes are downloaded, so put them in a different location.) cd ../../ git clone --recursive https://github.com/getpelican/pelican-themes cd pelican-themes pelican-themes -i bootstrap Change the path location of the theme in the pelicanconf.py file: cd blog cp -a ../pelican-themes/bootstrap theme vi pelicanconf.py Specify the path where the theme will be saved to (this was copied with the command above). THEME = './theme' Change other information, such as your name and site name and site url in the pelicanconf.py file. wget https://raw.githubusercontent.com/charlesreid1/magic-flying-pelican/master/pelican/content/posts/hello-world-1.md mkdir posts mv hello-world-1.md posts/ mv hello-world-1.md 2018-09-05.md vi 2018-09-05.md Then run: pelican This will produce output like this: WARNING : Removed extraneous trailing slash from SITEURL . Done : Processed 2 articles , 0 drafts , 0 pages and 0 hidden pages in 0.55 seconds . Check how it looks: python -m http.server (Go to http://localhost:8000/output/ ) At anytime, you can remove the output/ directory, because this is what is generated when running pelican . rm -rf output/ Hosting on github.io Add/commit changes, then set up a repository on GitHub (don't initialize with README.md ) to add as remote. git add --all git status git commit -m \"first commit\" git remote add origin https://github.com/ljcohen/blog.git git push -u origin master Install ghp-import: pipenv ghp - import pipenv install ghp - import git status git diff ghp - import which ghp - import ghp - import -- help ghp - import pelican pelican ghp - import output git branch ghp - import - p output Using travis-ci Make a travis .yml file: vi .travis.yml With this content: language : python dist : xenial python : '3.6' branches : only : - master install : - pip install pipenv - pipenv install script : - pipenv run pelican deploy : provider : pages skip - cleanup : true local - dir : output github - token : $GITHUB_TOKEN # Set in the settings page of your repository on : branch : master Add/commit: git add .travis.yml git commit -m \"added travis-ci\" git push -u origin master Go to travis-ci and login to GitHub. Set up your personal access tokens on your GitHub account. Go to 'Settings', 'Integration & services' in the GitHub repository to configure Travis CI with a key to give push access. Add the repository to Travis CI: https://travis-ci.com/ljcohen/blog You're done! Now add more posts! vi 2018-09-05_b.md vi 2018-09-05_b.md git add 2018-09-05_b.md git commit -m \"new post\" git push vi pelicanconf.py Travis CI will automatically run pelican and push to github. With Pelican, you can also import an existing site, like from WordPress . Thank you, Luiz!","tags":"Python","url":"https://ljcohen.github.io/blog/blogging-with-pelican.html"}]}