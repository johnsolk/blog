<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>monsteRbashSeq - Python</title><link href="https://ljcohen.github.io/blog/" rel="alternate"></link><link href="https://ljcohen.github.io/blog/feeds/python.atom.xml" rel="self"></link><id>https://ljcohen.github.io/blog/</id><updated>2018-09-06T00:00:00-07:00</updated><entry><title>Blogging with Pelican</title><link href="https://ljcohen.github.io/blog/blogging-with-pelican.html" rel="alternate"></link><published>2018-09-06T00:00:00-07:00</published><updated>2018-09-06T00:00:00-07:00</updated><author><name>Lisa K. Johnson</name></author><id>tag:ljcohen.github.io,2018-09-06:/blog/blogging-with-pelican.html</id><summary type="html">&lt;p&gt;In Lab Learning Opportunity (ILLO) by Data Intensive Biology (DIB) lab mate, Luiz Irber.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Luiz was gratious in spending some time walking us through how to set up a blog with Pelican, host it on &lt;a href="https://pages.github.com/"&gt;github.io&lt;/a&gt;, and have &lt;a href="https://travis-ci.com/"&gt;travis-ci&lt;/a&gt; test and deploy.&lt;/p&gt;
&lt;p&gt;Video: &lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/QhC9yjUQL6o'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We started with the tutorial from &lt;a href="https://git.charlesreid1.com/charlesreid1/how-do-i-pelican"&gt;Charles Reid&lt;/a&gt;, which has &lt;a href="https://github.com/charlesreid1/magic-flying-pelican/pelican/"&gt;practice content&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Some Background&lt;/h2&gt;
&lt;p&gt;Over the past few years as a PhD student in Dr. Titus Brown's &lt;a href="http://ivory.idyll.org/lab/"&gt;DIB Lab&lt;/a&gt; at UC Davis, I've been fortunate to be able to expand my data science toolkit. This has included a range of skills from &lt;a href="https://www.biorxiv.org/content/early/2018/05/17/323576"&gt;automated genomic-scale data analysis &amp;amp; visualization&lt;/a&gt; to time-saving tricks like note-taking in &lt;a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/"&gt;markdown&lt;/a&gt;. Markdown is a &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;simple text-formatting language&lt;/a&gt;, sorta like html. At the encouragement of Titus a few years ago during our summer &lt;a href="http://ivory.idyll.org/dibsi/"&gt;DIBSI workshop&lt;/a&gt;, I started taking notes on the online collaborative document site, &lt;a href="https://hackmd.io/"&gt;hackmd.io&lt;/a&gt;. This cool site lets you write in markdown, and immediately see it rendered on the right side. The link can be shared with collaborators, and the document can be exported to &lt;code&gt;.pdf&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt;, or &lt;code&gt;.md&lt;/code&gt; formats.&lt;/p&gt;
&lt;p&gt;I've had &lt;a href="https://monsterbashseq.wordpress.com/"&gt;a blog&lt;/a&gt; that I started when I was learning and developing computational skills for genomics research &lt;a href="http://vosslab.weebly.com/lab-alumni.html"&gt;as a lab technician at HBOI in FL&lt;/a&gt;. Wordpress blogs are great for quickly publishing a post, with capacity for formatting pictures (screenshots) and links to Tweets. But manually converting &lt;code&gt;.md&lt;/code&gt; documents and code chunks in the online wordpress user interface is tedious. &lt;/p&gt;
&lt;p&gt;This week, when &lt;a href="https://github.com/luizirber"&gt;Luiz Irber&lt;/a&gt; re-instated our weekly chain of lab group emails outlining our past week's accomplishments and goals for the coming week, I casually mentioned in my summary that I wanted to migrate from wordpress to a more markdown-friendly format for my blog. I've tried &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; in the past, and have been slowly migrating &lt;a href="https://ljcohen.github.io/"&gt;my website&lt;/a&gt; to something markdown-friendly, but haven't quite hit my stride yet with migrating my blog over. Luiz immediately chimed in that &lt;a href="http://docs.getpelican.com/en/3.6.3/quickstart.html"&gt;Pelican&lt;/a&gt; is great! And uses it for his &lt;a href="https://blog.luizirber.org/"&gt;blog&lt;/a&gt;. It turns out that &lt;a href="http://ivory.idyll.org/blog/"&gt;Titus' blog&lt;/a&gt; and other lab mate, &lt;a href="https://charlesreid1.com/"&gt;Charles Reid&lt;/a&gt; both have their blogs in Pelican as well. One of the many advantages of Pelican is that it is written in Python, unlike Jekyll which is written in Ruby. (I'm more comfortable coding and debugging in Python than in Ruby.) And Charles provided lots of documentation on how to use Pelican! It's great to be in a lab group where people have such useful and encouraging advice.&lt;/p&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;Make a working directory for your blog:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir blog
cd blog/
git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get the configuration file, &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/charlesreid1/magic-flying-pelican/master/pelican/pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir content
cd content/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Navigate to some of the example posts and download:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/charlesreid1/magic-flying-pelican/master/pelican/content/posts/hello-world-1.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Taking a look, we see that each &lt;code&gt;.md&lt;/code&gt; post file must have this header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;charlesreid1&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have to install Pelican and markdown. Luiz uses &lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt;. This will activate a new virtualenv with pelican and markdown available without messing with dependencies in your computer's $PATH.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --user pipenv
export PATH=~/.local/bin:$PATH
pipenv install pelican markdown
pipenv shell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need some Pelican &lt;a href="http://www.pelicanthemes.com/"&gt;themes&lt;/a&gt;. (All themes are downloaded, so put them in a different location.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ../../
git clone --recursive https://github.com/getpelican/pelican-themes
cd pelican-themes
pelican-themes -i bootstrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change the path location of the theme in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd blog
cp -a ../pelican-themes/bootstrap theme
vi pelicanconf.py 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Specify the path where the theme will be saved to (this was copied with the command above).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = &amp;#39;./theme&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change other information, such as your name and site name and site url in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/charlesreid1/magic-flying-pelican/master/pelican/content/posts/hello-world-1.md
mkdir posts
mv hello-world-1.md posts/
mv hello-world-1.md 2018-09-05.md
vi 2018-09-05.md 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will produce output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Removed&lt;/span&gt; &lt;span class="n"&gt;extraneous&lt;/span&gt; &lt;span class="n"&gt;trailing&lt;/span&gt; &lt;span class="n"&gt;slash&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;SITEURL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Processed&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;drafts&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hidden&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.55&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check how it looks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m http.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Go to http://localhost:8000/output/)&lt;/p&gt;
&lt;p&gt;At anytime, you can remove &lt;code&gt;output/&lt;/code&gt;, because this is what is generated when running &lt;code&gt;pelican&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf output/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hosting on github.io&lt;/h3&gt;
&lt;p&gt;Add/commit changes, then set up a repository on GitHub (don't initialize with &lt;code&gt;README.md&lt;/code&gt;) to add as remote.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add --all
git status
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin https://github.com/ljcohen/blog.git
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install ghp-import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;
&lt;span class="nn"&gt;pipenv&lt;/span&gt; &lt;span class="nn"&gt;install&lt;/span&gt; &lt;span class="nn"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;
&lt;span class="nn"&gt;git&lt;/span&gt; &lt;span class="nn"&gt;status&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;
&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;
&lt;span class="nn"&gt;which&lt;/span&gt; &lt;span class="nn"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;
&lt;span class="nn"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;
&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Using travis-ci&lt;/h3&gt;
&lt;p&gt;Make a travis &lt;code&gt;.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi .travis.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xenial&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3.6&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pipenv&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pipenv&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pipenv&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
  &lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
  &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$GITHUB_TOKEN&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add/commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .travis.yml 
git commit -m &amp;quot;added travis-ci&amp;quot;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://travis-ci.com/"&gt;travis-ci&lt;/a&gt; and login to GitHub. &lt;/li&gt;
&lt;li&gt;Set up your &lt;a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/"&gt;personal access tokens&lt;/a&gt; on your GitHub account. &lt;/li&gt;
&lt;li&gt;Go to 'Settings', 'Integration &amp;amp; services' in the GitHub repository to configure Travis CI with a key to give push access.&lt;/li&gt;
&lt;li&gt;Add the repository to Travis CI: https://travis-ci.com/ljcohen/blog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You're done!&lt;/p&gt;
&lt;p&gt;Now add more posts!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi 2018-09-05_b.md 
vi 2018-09-05_b.md 
git add 2018-09-05_b.md 
git commit -m &amp;quot;new post&amp;quot;
git push
vi pelicanconf.py 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Travis CI will automatically run pelican and push to github.&lt;/p&gt;
&lt;p&gt;With Pelican, you can also &lt;a href="http://docs.getpelican.com/en/stable/importer.html#"&gt;import an existing site, like from WordPress&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you, Luiz!&lt;/p&gt;
&lt;p&gt;&lt;img src="img/dib.jpg"&gt;&lt;/p&gt;</content><category term="pelican"></category></entry><entry><title>Finding coding sequences in DNA</title><link href="https://ljcohen.github.io/blog/possible-combinations.html" rel="alternate"></link><published>2013-11-29T20:33:00-08:00</published><updated>2013-11-29T20:33:00-08:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-11-29:/blog/possible-combinations.html</id><summary type="html">&lt;p&gt;From the UCSD "Bioinformatics Algorithms" class, &lt;a href="https://beta.stepic.org/Bioinformatics-Algorithms-2/How-Do-Bacteria-Make-Antibiotics-96/#step-6"&gt;programming
assignments week
2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given a DNA sequence and an amino acid peptide sequence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DNA=&amp;quot;ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA&amp;quot;
aapeptide=&amp;quot;MA&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I want to find all occurrences (including reverse compliment) of the
coding sequence in the DNA for that amino acid peptide sequence. Example
output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     ATGGCC
     GGCCAT …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;From the UCSD "Bioinformatics Algorithms" class, &lt;a href="https://beta.stepic.org/Bioinformatics-Algorithms-2/How-Do-Bacteria-Make-Antibiotics-96/#step-6"&gt;programming
assignments week
2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given a DNA sequence and an amino acid peptide sequence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DNA=&amp;quot;ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA&amp;quot;
aapeptide=&amp;quot;MA&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I want to find all occurrences (including reverse compliment) of the
coding sequence in the DNA for that amino acid peptide sequence. Example
output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     ATGGCC
     GGCCAT
     ATGGCC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because the genetic code is
&lt;a href="http://en.wikipedia.org/wiki/Codon_degeneracy"&gt;degenerate&lt;/a&gt;, there may
be multiple possible coding sequences for the amino acid peptide in a
strand (sequence) of DNA.&lt;/p&gt;
&lt;p&gt;Python coding steps:&lt;/p&gt;
&lt;p&gt;1. From a Python dictionary "aminos" with aa as keys and RNA codons as
values, make a new dictionary with aa position (depending on length of
aa sequence given) as keys and a list of possible RNA codons as values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def aminoacid_codons(aapeptide):
    aminos={&amp;#39;I&amp;#39;:[&amp;#39;AUU&amp;#39;,&amp;#39;AUC&amp;#39;,&amp;#39;AUA&amp;#39;],&amp;#39;L&amp;#39;:[&amp;#39;CUU&amp;#39;,&amp;#39;CUC&amp;#39;,&amp;#39;CUA&amp;#39;,&amp;#39;CUG&amp;#39;,&amp;#39;UUA&amp;#39;,&amp;#39;UUG&amp;#39;],
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;'V':['GUU','GUC','GUA','GUG'],'F':['UUU','UUC'],'M':['AUG'],&lt;br&gt;
               'C':['UGU','UGC'],'A':['GCU','GCC','GCA','GCG'],'G':['GGU','GGC','GGA','GGG'],&lt;br&gt;
               'P':['ACU','ACC','ACA','ACG'],'T':['ACU','ACC','ACA','ACG'],&lt;br&gt;
               'S':['UCU','UCC','UCA','UCG','ACU','AGC'],'Y':['UAU','UAC'],&lt;br&gt;
               'W':['UGG'],'Q':['CAA','CAG'],'N':['AAU','AAC'],'H':['CAU','CAC'],&lt;br&gt;
               'E':['GAA','GAG'],'D':['GAU','GAC'],'K':['AAA','AAG'],&lt;br&gt;
               'R':['CGU','CGC','CGA','CGG','AGA','AGG'],'X':['UAA','UAG','UGA']}
        codon_dict={}
        count=0
        for aa in aapeptide:
             count+=1
             codon_dict[count]=aminos[aa]         
        return codon_dict&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aapeptide=&amp;quot;MA&amp;quot;
print(aminoacid_codons(aapeptide))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output from the above function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{1: [&amp;#39;AUG&amp;#39;], 2: [&amp;#39;GCU&amp;#39;, &amp;#39;GCC&amp;#39;, &amp;#39;GCA&amp;#39;, &amp;#39;GCG&amp;#39;]}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2. Construct different sequences with 2 codons each from all
possibilities. The reverse compliment should also be considered.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/306400/how-do-i-randomly-select-an-item-from-a-list-using-python"&gt;How do I randomly select an item from a list in
Python&lt;/a&gt;?
See Python, &lt;a href="http://docs.python.org/3.1/library/random.html"&gt;pseudorandom
module&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2212433/counting-the-number-of-keywords-in-a-dictionary-in-python"&gt;How many dictionary keys are
there&lt;/a&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def aa_DNA(codon_dict):
   codon_positions=len(codon_dict)
   position=1
   codon_range=range(position,codon_positions)
   while position&amp;amp;lt;=codon_positions:
      listofcodons=codon_dict[position]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3. Randomly select an item from "listofcodons" so that when it is
selected it should be removed from the list and can't be selected again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is where I&amp;#39;m stuck.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Return a list of all RNA combinations.&lt;br&gt;
5. Convert to DNA&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DNA=RNAstring.replace(&amp;#39;U&amp;#39;,&amp;#39;T&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6. Deal with reverse compliment.&lt;/p&gt;
&lt;p&gt;7. Input DNA sequence, reverse compliment&lt;/p&gt;
&lt;p&gt;8. Compare input with possibilities&lt;/p&gt;</content></entry><entry><title>Python Variable Names</title><link href="https://ljcohen.github.io/blog/python-variable-names.html" rel="alternate"></link><published>2013-09-28T13:50:00-07:00</published><updated>2013-09-28T13:50:00-07:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-09-28:/blog/python-variable-names.html</id><summary type="html">&lt;p&gt;I learned today that in Python, variable names cannot start with a
number. For example, this is an incorrect variable name:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1_AA_aa
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;This could be used instead:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AA_aa1
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;http://en.wikibooks.org/wiki/Python_Beginner_to_Expert/Native_Types&lt;/p&gt;</summary><content type="html">&lt;p&gt;I learned today that in Python, variable names cannot start with a
number. For example, this is an incorrect variable name:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1_AA_aa
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;This could be used instead:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AA_aa1
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;http://en.wikibooks.org/wiki/Python_Beginner_to_Expert/Native_Types&lt;/p&gt;</content></entry><entry><title>Classes</title><link href="https://ljcohen.github.io/blog/classes.html" rel="alternate"></link><published>2013-09-26T16:03:00-07:00</published><updated>2013-09-26T16:03:00-07:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-09-26:/blog/classes.html</id><summary type="html">&lt;p&gt;http://biopython.org/DIST/docs/api/Bio.SeqUtils.ProtParam.ProteinAnalysis-class.html&lt;/p&gt;</summary><content type="html">&lt;p&gt;http://biopython.org/DIST/docs/api/Bio.SeqUtils.ProtParam.ProteinAnalysis-class.html&lt;/p&gt;</content></entry><entry><title>leaving virtualenv</title><link href="https://ljcohen.github.io/blog/leaving-virtualenv.html" rel="alternate"></link><published>2013-06-18T22:05:00-07:00</published><updated>2013-06-18T22:05:00-07:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-06-18:/blog/leaving-virtualenv.html</id><summary type="html">&lt;p&gt;(Python)flcellogrl@purplebanyan:/home\$ deactivate&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Python)flcellogrl@purplebanyan:/home\$ deactivate&lt;/p&gt;</content></entry><entry><title>Python Dictionary Objects</title><link href="https://ljcohen.github.io/blog/python-dictionary-objects.html" rel="alternate"></link><published>2013-04-26T20:54:00-07:00</published><updated>2013-04-26T20:54:00-07:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-04-26:/blog/python-dictionary-objects.html</id><summary type="html">&lt;p&gt;Dictionaries stored as hashtables vs. linear searching keys. THis kinda
fits into your discussion of why linear searching is slow.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-the-mighty-dictionary-55-3352147"&gt;http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-the-mighty-dictionary-55-3352147&lt;/a&gt;&lt;br&gt;
&lt;a href="http://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented"&gt;http://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented&lt;/a&gt;&lt;br&gt;
&lt;a href="http://stackoverflow.com/questions/1602934/what-is-a-good-way-to-test-if-a-key-exists-in-python-dictionary"&gt;http://stackoverflow.com/questions/1602934/what-is-a-good-way-to-test-if-a-key-exists-in-python-dictionary&lt;/a&gt;&lt;br&gt;
&lt;a href="http://wiki.python.org/moin/DictionaryKeys"&gt;http://wiki.python.org/moin/DictionaryKeys&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dictionaries stored as hashtables vs. linear searching keys. THis kinda
fits into your discussion of why linear searching is slow.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-the-mighty-dictionary-55-3352147"&gt;http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-the-mighty-dictionary-55-3352147&lt;/a&gt;&lt;br&gt;
&lt;a href="http://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented"&gt;http://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented&lt;/a&gt;&lt;br&gt;
&lt;a href="http://stackoverflow.com/questions/1602934/what-is-a-good-way-to-test-if-a-key-exists-in-python-dictionary"&gt;http://stackoverflow.com/questions/1602934/what-is-a-good-way-to-test-if-a-key-exists-in-python-dictionary&lt;/a&gt;&lt;br&gt;
&lt;a href="http://wiki.python.org/moin/DictionaryKeys"&gt;http://wiki.python.org/moin/DictionaryKeys&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Problem</title><link href="https://ljcohen.github.io/blog/problem.html" rel="alternate"></link><published>2013-04-25T20:44:00-07:00</published><updated>2013-04-25T20:44:00-07:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-04-25:/blog/problem.html</id><summary type="html">&lt;p&gt;The first step is admitting you have a problem. I'm addicted:&lt;/p&gt;
&lt;p&gt;http://cscircles.cemc.uwaterloo.ca/visualize/#mode=edit&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first step is admitting you have a problem. I'm addicted:&lt;/p&gt;
&lt;p&gt;http://cscircles.cemc.uwaterloo.ca/visualize/#mode=edit&lt;/p&gt;</content></entry><entry><title>Programming Ideas</title><link href="https://ljcohen.github.io/blog/programming-ideas.html" rel="alternate"></link><published>2013-04-04T20:42:00-07:00</published><updated>2013-04-04T20:42:00-07:00</updated><author><name>monsterbashseq</name></author><id>tag:ljcohen.github.io,2013-04-04:/blog/programming-ideas.html</id><summary type="html">&lt;p&gt;Ideas for Python coding:&lt;br&gt;
- put sequences in fasta format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;parses sequences from fasta format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reverse translate amino acid sequence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search fasta file with EST for ORF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search ncbi and pull fasta files for taxonomic groups and specific
genes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;primer melting temperature  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GC content  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;molarity calculations, e.g.
http://www.graphpad …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Ideas for Python coding:&lt;br&gt;
- put sequences in fasta format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;parses sequences from fasta format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reverse translate amino acid sequence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search fasta file with EST for ORF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search ncbi and pull fasta files for taxonomic groups and specific
genes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;primer melting temperature  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GC content  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;molarity calculations, e.g.
http://www.graphpad.com/quickcalcs/molarityform.cfm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOMETHING FUNCTIONAL: blast2go  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;upload a list of accessions  &lt;/li&gt;
&lt;li&gt;enrichment analysis to get a chart of significant functional groups
from a list of accessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These require aligning:&lt;br&gt;
- primer alignments to source sequences&lt;br&gt;
- multiple alignments&lt;/p&gt;</content></entry></feed>